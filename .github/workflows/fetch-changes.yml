name: Archive Packagist Changes
on:
  schedule:
    - cron: '0 * * * *'  # 每小时整点运行一次
  workflow_dispatch:      # 支持手动触发

jobs:
  fetch-and-store:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允许推送代码
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get last timestamp (max 24h)
        id: last_timestamp
        run: |
          # 获取当前时间（UNIX 毫秒时间戳）
          CURRENT_TS=$(date +%s%3N)
          # 计算24小时前的毫秒时间戳
          MIN_TS=$((CURRENT_TS - 86400000))  # 24h = 86400000ms
      
          # 尝试获取最新文件的时间戳
          LAST_FILE=$(ls -t changes/changes_*.json 2>/dev/null | head -1 || true)
          if [ -n "$LAST_FILE" ]; then
            # 从文件名提取时间（格式：changes_2025-07-28_09-51-45.json）
            # 1. 提取日期和时间部分（去掉前缀和扩展名）
            FILENAME=$(basename "$LAST_FILE" .json)
            DATE_PART=$(echo "$FILENAME" | cut -d'_' -f2)  # 2025-07-28
            TIME_PART=$(echo "$FILENAME" | cut -d'_' -f3)  # 09-51-45
            # 2. 将时间部分的分隔符从 - 替换为 :
            TIME_PART_FIXED=$(echo "$TIME_PART" | tr '-' ':')  # 09:51:45
            # 3. 组合成标准格式：YYYY-MM-DD HH:MM:SS
            STANDARD_TIME="$DATE_PART $TIME_PART_FIXED"
            # 4. 转换为 UNIX 毫秒时间戳
            FILE_TS=$(date -d "$STANDARD_TIME" +%s%3N)
            
            # 选择较大的时间戳（确保不超过24小时）
            if [ $FILE_TS -lt $MIN_TS ]; then
              SINCE=$MIN_TS
            else
              SINCE=$FILE_TS
            fi
          else
            # 如果没有历史文件，直接使用24小时前
            SINCE=$MIN_TS
          fi
          echo "since=$SINCE" >> $GITHUB_OUTPUT

      - name: Fetch changes.json
        run: |
          curl -s "https://packagist.org/metadata/changes.json?since=${{ steps.last_timestamp.outputs.since }}1" \
            > "changes/changes_$(date +"%Y-%m-%d_%H-%M-%S").json"

      - name: Commit and push
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add changes/
          git commit -m "Update changes.json at $(date +'%Y-%m-%d %H:%M:%S')"
          git push
